pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION            = 'eu-central-1'
        VERSION               = "${env.BUILD_NUMBER}-${env.BRANCH_NAME}"
        IMAGE                 = "noe-backend"
        DOCKER_REPO           = "074164835766.dkr.ecr.eu-central-1.amazonaws.com"
        BACKEND_IMAGE         = "${IMAGE}:${VERSION}"
        S3_BUCKET_URL         = "https://noe-static.s3.eu-central-1.amazonaws.com"
        S3_BUCKET_NAME        = "noe-static"
    }

    stages {
        stage("Git checkout") {
            steps {
                script {
                    currentBuild.displayName = "${env.VERSION}"
                }    
                sh 'git submodule update --init'
            }
        }  
        stage("Build") {
            steps {
                dir('code/backend'){
                    sh '''
                    docker build --no-cache \
                        -t ${IMAGE}:${VERSION} \
                        --build-arg=COMMIT=$(git rev-parse --short HEAD) \
                        --build-arg=BRANCH=$(git rev-parse --abbrev-ref HEAD) \
                        --build-arg=BUILD=${VERSION} \
                        --build-arg=STATIC_URL=${S3_BUCKET_URL}/${VERSION}/ \
                        -f Dockerfile \
                        .
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                dir('code/backend') {
                    sh 'echo "Placeholder for testing"'
                }
            }
        }
// for static content
        // stage("Collect Static content") {
        //     steps {
        //         dir('code/backend') {
        //             sh '''
        //             cat <<EOF > local.env
        //             # This is for a completely local setup, do not reuse anything in production
        //             DJANGO_SECRET_KEY=verysecret
        //             ALLOWED_CORS_HOSTS=http://localhost:3000
        //             EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
        //             EMAIL_VERIFICATION_KEY=uG0jE-LxfZ9aJH3mQls3_BofNtm6kMlVpJQXdKEyptA= #this is not to be used anywhere else
        //             FRONTEND_URL=http://localhost:3000
        //             DJANGO_DATABASE_HOST=localhost
        //             DJANGO_DATABASE_PORT=1111
        //             DJANGO_DATABASE_USER=dummyuser
        //             DJANGO_DATABASE_PASSWORD=nothing
        //             DJANGO_DATABASE_ENGINE=django.db.backends.sqlite3
        //             DJANGO_DATABASE_NAME=db.sqlite3
        //             STATIC_ROOT=/static
        //             EOF
        //             '''
        //             sh 'mkdir -p ./static/${VERSION}'
        //             sh 'docker run --env-file local.env -v $(pwd)/static/${VERSION}:/static ${IMAGE}:${VERSION} ./manage.py collectstatic --noinput'
        //             // sh 'cp -r assets/css ./static/${VERSION}/'
        //             // sh 'cp -r assets/images ./static/${VERSION}/'       
        //         }
        //     }
        // }
        // stage("Push static content to S3") {
        //     steps {
        //         dir('code/backend') {
        //             sh 'aws s3 cp ./static/${VERSION} s3://${S3_BUCKET_NAME}/${VERSION}/ --recursive --acl=public-read'
        //         }
        //     }
        // }
        stage("Push image to ECR") {
            steps {
                sh '$(aws ecr get-login --no-include-email --region eu-central-1)'
                sh 'docker tag ${IMAGE}:${VERSION} ${DOCKER_REPO}/${IMAGE}:${VERSION}'
                sh 'docker tag ${IMAGE}:${VERSION} ${DOCKER_REPO}/${IMAGE}:latest'
                sh 'docker push ${DOCKER_REPO}/${IMAGE}:${VERSION}'
                sh 'docker push ${DOCKER_REPO}/${IMAGE}:latest'
            }
        }
    }
    
    post {
// Skipping this for now, until we have tests to run
        // always {
        //     dir('code/backend'){
        //         sh 'docker-compose down --rmi=all --remove-orphans'
        //     }
        // }
        success {
            sh """
            sleep 5
            aws ecr describe-image-scan-findings \
            --repository-name ${env.IMAGE} \
            --image-id=imageTag=${env.VERSION} \
            --region ${env.AWS_REGION} | jq '.imageScanFindings.findingSeverityCounts' > image_scan_results.txt
            """
            archiveArtifacts artifacts: 'image_scan_results.txt', fingerprint: false

        }
    }
}
